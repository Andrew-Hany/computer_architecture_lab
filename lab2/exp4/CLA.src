`timescale 1ns / 1ps

module CLA( input [3:0] A , input [3:0] B , output [4:0] result );
wire [4:0] C;
wire [3:0] Gen,Pro,sum;

FullAdder adder1 (A[0],B[0],C[0],sum[0]);
FullAdder adder2 (A[1],B[1],C[1],sum[1]);
FullAdder adder3 (A[2],B[2],C[2],sum[2]);
FullAdder adder4 (A[3],B[3],C[3],sum[3]);

 
// Create the Generate (G) Terms:  Gi=Ai*Bi
assign Gen[0]= A[0] & B[0];
assign Gen[1]= A[1] & B[1];
assign Gen[2]= A[2] & B[2];
assign Gen[3]= A[3] & B[3];

// Create the Propagate Terms: Pi=Ai+Bi
assign Pro[0]= A[0] | B[0];
assign Pro[1]= A[1] | B[1];
assign Pro[2]= A[2] | B[2];
assign Pro[3]= A[3] | B[3];

// Create the Carry Terms:
assign C[0]=1'b0; // no prevoius carry!
assign C[1]= Gen[0] | (Pro[0] & C[0]);
assign C[2]= Gen[1] | (Pro[1] & C[1]);
assign C[3]= Gen[2] | (Pro[2] & C[2]);
assign C[4]= Gen[3] | (Pro[3] & C[3]);

assign result ={C[4],sum};
endmodule

