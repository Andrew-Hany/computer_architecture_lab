`timescale 1ns / 1ps

module ALU (
input [31:0] in1, in2,
input [3:0] aluSel,
output reg [31:0] result, output zero,output reg overflow_flag );
wire c1, c2;
wire [31:0]sum;
ripple_carry plus( in1,in2, 0,sum,c1);
wire [31:0]sub;
ripple_carry subt( in1,~in2+1, 0,sub,c2);
integer i;

always @(*)
begin
case(aluSel)
4'b0010: 
begin
result= sum;
if(c1==1)
overflow_flag=1;
else
overflow_flag=0;
end
 
 //2 ;
4'b0110 :
begin
result= sub ;
if(c2==1)
overflow_flag=1;
else 
overflow_flag=0;
end    //sub6


4'b0000 : result= in1 & in2  ; //and0
4'b0001 :  result= in1 | in2 ;//or1
4'b0011:  result= in1 ^ in2 ;
//logical right //4


4'b0100: 
begin
for(i=0;i<in2;i=i+1)
 result = {1'b0,in1[31:1]}; 
end


//logical left //8
4'b1111: 
begin
for(i=0;i<in2;i=i+1)
 result = {in1[30:0],1'b0};  //11111111 -> 1111111110
end


//arth right //9
4'b1100: 
begin
for(i=0;i<in2;i=i+1)
 result = {{in1[31]?1'b1:1'b0},in1[31:1]}; 
end


default : result=0;
endcase
end
  assign zero={result==0?1:0};
endmodule

